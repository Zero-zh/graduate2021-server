<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.graduate.loyee.mapper.ExperienceMapper" >
  <resultMap id="BaseResultMap" type="com.graduate.loyee.entity.Experience" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="views" property="views" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.graduate.loyee.entity.Experience" extends="BaseResultMap" >
    <result column="link" property="link" jdbcType="LONGVARCHAR" />
    <result column="desc" property="desc" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, `time`, title, author, `type`, views, `status`,`link`,`desc`
  </sql>
  <sql id="Blob_Column_List" >
    link, `desc`
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from experience
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from experience
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.graduate.loyee.entity.Experience" >
    insert into experience (id, `time`, title, 
      author, `type`, views, 
      `status`, link, `desc`
      )
    values (#{id,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR}, 
      #{author,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{views,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{link,jdbcType=LONGVARCHAR}, #{desc,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.graduate.loyee.entity.Experience" >
    insert into experience
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="time != null" >
        `time`,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="author != null" >
        author,
      </if>
      <if test="type != null" >
        `type`,
      </if>
      <if test="views != null" >
        views,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="link != null" >
        link,
      </if>
      <if test="desc != null" >
        `desc`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="views != null" >
        #{views,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="link != null" >
        #{link,jdbcType=LONGVARCHAR},
      </if>
      <if test="desc != null" >
        #{desc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.graduate.loyee.entity.Experience" >
    update experience
    <set >
      <if test="time != null" >
        `time` = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        `type` = #{type,jdbcType=VARCHAR},
      </if>
      <if test="views != null" >
        views = #{views,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="link != null" >
        link = #{link,jdbcType=LONGVARCHAR},
      </if>
      <if test="desc != null" >
        `desc` = #{desc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.graduate.loyee.entity.Experience" >
    update experience
    set `time` = #{time,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      views = #{views,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      link = #{link,jdbcType=LONGVARCHAR},
      `desc` = #{desc,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.graduate.loyee.entity.Experience" >
    update experience
    set `time` = #{time,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      views = #{views,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="getWorkExperience" parameterType="com.graduate.loyee.vo.QAndAVo.QueryAskAnswerVo" resultType="com.graduate.loyee.entity.Experience">
    SELECT <include refid="Base_Column_List" />
    FROM experience
    <where>
      <if test="type != null" >
        AND `type` = #{type,jdbcType=VARCHAR}
      </if>
      <if test="content != null" >
        AND (title LIKE CONCAT('%',#{content,jdbcType=VARCHAR},'%')
        OR author LIKE CONCAT('%',#{content,jdbcType=VARCHAR},'%')
        OR `desc` LIKE CONCAT('%',#{content,jdbcType=VARCHAR},'%'))
      </if>
      AND `status` = 0
    </where>
    ORDER BY `time` DESC
  </select>
</mapper>